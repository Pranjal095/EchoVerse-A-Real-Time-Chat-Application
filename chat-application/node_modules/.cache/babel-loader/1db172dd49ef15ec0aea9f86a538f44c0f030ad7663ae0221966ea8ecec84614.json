{"ast":null,"code":"var lowerCase = require('lower-case');\nvar NON_WORD_REGEXP = require('./vendor/non-word-regexp');\nvar CAMEL_CASE_REGEXP = require('./vendor/camel-case-regexp');\nvar CAMEL_CASE_UPPER_REGEXP = require('./vendor/camel-case-upper-regexp');\n\n/**\n * Sentence case a string.\n *\n * @param  {string} str\n * @param  {string} locale\n * @param  {string} replacement\n * @return {string}\n */\nmodule.exports = function (str, locale, replacement) {\n  if (str == null) {\n    return '';\n  }\n  replacement = typeof replacement !== 'string' ? ' ' : replacement;\n  function replace(match, index, value) {\n    if (index === 0 || index === value.length - match.length) {\n      return '';\n    }\n    return replacement;\n  }\n  str = String(str)\n  // Support camel case (\"camelCase\" -> \"camel Case\").\n  .replace(CAMEL_CASE_REGEXP, '$1 $2')\n  // Support odd camel case (\"CAMELCase\" -> \"CAMEL Case\").\n  .replace(CAMEL_CASE_UPPER_REGEXP, '$1 $2')\n  // Remove all non-word characters and replace with a single space.\n  .replace(NON_WORD_REGEXP, replace);\n\n  // Lower case the entire string.\n  return lowerCase(str, locale);\n};","map":{"version":3,"names":["lowerCase","require","NON_WORD_REGEXP","CAMEL_CASE_REGEXP","CAMEL_CASE_UPPER_REGEXP","module","exports","str","locale","replacement","replace","match","index","value","length","String"],"sources":["/home/spidey/chat-application/node_modules/react-icons-kit/node_modules/no-case/no-case.js"],"sourcesContent":["var lowerCase = require('lower-case')\n\nvar NON_WORD_REGEXP = require('./vendor/non-word-regexp')\nvar CAMEL_CASE_REGEXP = require('./vendor/camel-case-regexp')\nvar CAMEL_CASE_UPPER_REGEXP = require('./vendor/camel-case-upper-regexp')\n\n/**\n * Sentence case a string.\n *\n * @param  {string} str\n * @param  {string} locale\n * @param  {string} replacement\n * @return {string}\n */\nmodule.exports = function (str, locale, replacement) {\n  if (str == null) {\n    return ''\n  }\n\n  replacement = typeof replacement !== 'string' ? ' ' : replacement\n\n  function replace (match, index, value) {\n    if (index === 0 || index === (value.length - match.length)) {\n      return ''\n    }\n\n    return replacement\n  }\n\n  str = String(str)\n    // Support camel case (\"camelCase\" -> \"camel Case\").\n    .replace(CAMEL_CASE_REGEXP, '$1 $2')\n    // Support odd camel case (\"CAMELCase\" -> \"CAMEL Case\").\n    .replace(CAMEL_CASE_UPPER_REGEXP, '$1 $2')\n    // Remove all non-word characters and replace with a single space.\n    .replace(NON_WORD_REGEXP, replace)\n\n  // Lower case the entire string.\n  return lowerCase(str, locale)\n}\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAY,CAAC;AAErC,IAAIC,eAAe,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACzD,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,4BAA4B,CAAC;AAC7D,IAAIG,uBAAuB,GAAGH,OAAO,CAAC,kCAAkC,CAAC;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAI,MAAM,CAACC,OAAO,GAAG,UAAUC,GAAG,EAAEC,MAAM,EAAEC,WAAW,EAAE;EACnD,IAAIF,GAAG,IAAI,IAAI,EAAE;IACf,OAAO,EAAE;EACX;EAEAE,WAAW,GAAG,OAAOA,WAAW,KAAK,QAAQ,GAAG,GAAG,GAAGA,WAAW;EAEjE,SAASC,OAAOA,CAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAE;IACrC,IAAID,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAMC,KAAK,CAACC,MAAM,GAAGH,KAAK,CAACG,MAAO,EAAE;MAC1D,OAAO,EAAE;IACX;IAEA,OAAOL,WAAW;EACpB;EAEAF,GAAG,GAAGQ,MAAM,CAACR,GAAG;EACd;EAAA,CACCG,OAAO,CAACP,iBAAiB,EAAE,OAAO;EACnC;EAAA,CACCO,OAAO,CAACN,uBAAuB,EAAE,OAAO;EACzC;EAAA,CACCM,OAAO,CAACR,eAAe,EAAEQ,OAAO,CAAC;;EAEpC;EACA,OAAOV,SAAS,CAACO,GAAG,EAAEC,MAAM,CAAC;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}